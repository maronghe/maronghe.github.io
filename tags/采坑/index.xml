<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>采坑 on 马荣贺&#39;s Home, You are my Homie!</title>
    <link>https://maronghe.github.io/tags/%E9%87%87%E5%9D%91/</link>
    <description>Recent content in 采坑 on 马荣贺&#39;s Home, You are my Homie!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2020 18:36:00 +0200</lastBuildDate><atom:link href="https://maronghe.github.io/tags/%E9%87%87%E5%9D%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#27 Float64不是什么好东西</title>
      <link>https://maronghe.github.io/2020/27.float64%E4%B8%8D%E6%98%AF%E4%BB%80%E4%B9%88%E5%A5%BD%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Tue, 20 Oct 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/27.float64%E4%B8%8D%E6%98%AF%E4%BB%80%E4%B9%88%E5%A5%BD%E4%B8%9C%E8%A5%BF/</guid>
      <description>背景： ​	近期在做一些数据计算相关的操作，需求是保留小数点后2位，经过一个计算公式以后，会得到2位数的计算结果。根据这个问题，引入了一些问题。
Case 1 ：
​	既然是小数点后有值，就能用整形int去表示值。所以很明显是float类型，在golang语言中，float64是较为常见的类型，但它并不是什么好东西，当前后端要传递float64时，前端的数据类型不能将float64的数据完全存储的下，只能通过转换成字符串的形式传递给前端做展示，当前端给后端传递‘float64’类型的值时，也需要将其包装成字符串类型，后端同学再转换成float64，无意间增加传参的复杂性。
Case 2：
var x float64 = 2.26 fmt.Println(x) // 2.26 y := x * 100 fmt.Println(y) // 225.99999999999997 ??? 为啥不是226呢 fmt.Println(int(y)) // 225 ??? 为啥不是226呢  就得好好查查这个问题
解决方案： Case 1 Solution：
​	对于Web开发时，可以参考B站的七米qimi的方案进行解决，具体视频可以访问后面的链接，其具体思路是通过Golang中的struct tag 进行处理，来兼容前端不能存储float64的情况。Go实战技巧&amp;ndash;你不知道的JSON操作技巧
Case 2 Solution：
​	根据Golang的官方论坛中的一个int16 and float64 Multiplication的邮件咨询了这个问题给Google的开发者，Ian Lance Taylor回答了float64的工作原理，想了解的小伙伴可以参考 What Every Computer Scientist Should Know About Floating-Point Arithmetic这篇文章。
​	但话说回来，目前的需求很简单，希望的是保留小数点后两位，然后乘以整形的数得到整数即可。那么就可以使用以下的float32的解决方案。思路是将float64强转成float32，再乘以整形的数字即可。到这里你可能有疑问， float64强转float32不会造成数据丢失么？答案是：在某种情况上，是会丢失，因为float64是64位也就是8个字节，float32是32位四个字节。但是，对于仅保留小数点后两位情况的case，float32是能力是完全可以cover的住的。举个例子，若你接口的请求量很低，干嘛要用集群部署呢处？反而是不是增加了系统的复杂性？浪费资源？所以，做一件事要考虑的东西，一定要结合需求。
var x float32 = 2.26 fmt.</description>
    </item>
    
    <item>
      <title>#2 [踩坑指南] json.Unmarshal后interface{}成map[string]interface{}</title>
      <link>https://maronghe.github.io/2020/2.json/</link>
      <pubDate>Sun, 29 Mar 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/2.json/</guid>
      <description>踩坑第一期 ​	可能大家工作中都会遇到类型断言，即接口类型断言是否为某种strcut类型i.(A)或某种struct的指针类型i.(*A)。
​	那么当一个想要一个interface{}类型既想转换成多种类型，且多种类型并不属于同一种。这句话说的可能比较绕圈，下面举个例子来看下。
​	当有两个SA和SB，当我们想要从字符串翻转成结构体时。我们可以
​	没问题，输出结果是
sa {logan 18 Beijing} PASS ​	但是当结构体内容时由其他结构体，以interface{}类型进行返回时，那么情景可能如下。
​	如果50和51行都注释掉了的话，那么结果会输出
it2 data type is map[string]interface {} ti3 type assertion error, it isn&amp;#39;t type SA ti4 type assertion error, it isn&amp;#39;t type SB ti5 is map[addr:Beijing age:18 name:logan] PASS ​	意味着data转换成了map[string]interface{}如果转换成map[string]interface{}类型后，那么想要key中的value还需要继续类型断言。
​	为什么会转成map[string]interface{}呢？因为对象底层类型，当unmarshal时并不知道对象底层类型。
那么，是否有一种希望转成的类型当我们的确希望转换成某种类型，如SA或SB。
​	答案是需要告诉结构类型的底层类型是什么，才可做此类型的类型断言。
​	解开注释50或51行后，则输出结果成为
it2 data type is *main.SB ti3 type assertion error, it isn&amp;#39;t type SA ti4 is &amp;amp;{logan 18 } ti5 type assertion error, it isn&amp;#39;t type map[string]interface{} PASS 总结：当我们希望类型断言的结构体中是一个interface{}类型时，希望转换成某种我们希望的类型，要进行底层类型的转换。那么就要给Data进行赋值类型。则断言方可成功。 参考内容  https://github.</description>
    </item>
    
  </channel>
</rss>
