<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 马荣贺&#39;s Home, You are my Homie!</title>
    <link>https://maronghe.github.io/posts/</link>
    <description>Recent content in Posts on 马荣贺&#39;s Home, You are my Homie!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2020 18:36:00 +0200</lastBuildDate><atom:link href="https://maronghe.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#27 Float64不是什么好东西</title>
      <link>https://maronghe.github.io/2020/27.float64%E4%B8%8D%E6%98%AF%E4%BB%80%E4%B9%88%E5%A5%BD%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Tue, 20 Oct 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/27.float64%E4%B8%8D%E6%98%AF%E4%BB%80%E4%B9%88%E5%A5%BD%E4%B8%9C%E8%A5%BF/</guid>
      <description>背景： ​	近期在做一些数据计算相关的操作，需求是保留小数点后2位，经过一个计算公式以后，会得到2位数的计算结果。根据这个问题，引入了一些问题。
Case 1 ：
​	既然是小数点后有值，就能用整形int去表示值。所以很明显是float类型，在golang语言中，float64是较为常见的类型，但它并不是什么好东西，当前后端要传递float64时，前端的数据类型不能将float64的数据完全存储的下，只能通过转换成字符串的形式传递给前端做展示，当前端给后端传递‘float64’类型的值时，也需要将其包装成字符串类型，后端同学再转换成float64，无意间增加传参的复杂性。
Case 2：
var x float64 = 2.26 fmt.Println(x) // 2.26 y := x * 100 fmt.Println(y) // 225.99999999999997 ??? 为啥不是226呢 fmt.Println(int(y)) // 225 ??? 为啥不是226呢  就得好好查查这个问题
解决方案： Case 1 Solution：
​	对于Web开发时，可以参考B站的七米qimi的方案进行解决，具体视频可以访问后面的链接，其具体思路是通过Golang中的struct tag 进行处理，来兼容前端不能存储float64的情况。Go实战技巧&amp;ndash;你不知道的JSON操作技巧
Case 2 Solution：
​	根据Golang的官方论坛中的一个int16 and float64 Multiplication的邮件咨询了这个问题给Google的开发者，Ian Lance Taylor回答了float64的工作原理，想了解的小伙伴可以参考 What Every Computer Scientist Should Know About Floating-Point Arithmetic这篇文章。
​	但话说回来，目前的需求很简单，希望的是保留小数点后两位，然后乘以整形的数得到整数即可。那么就可以使用以下的float32的解决方案。思路是将float64强转成float32，再乘以整形的数字即可。到这里你可能有疑问， float64强转float32不会造成数据丢失么？答案是：在某种情况上，是会丢失，因为float64是64位也就是8个字节，float32是32位四个字节。但是，对于仅保留小数点后两位情况的case，float32是能力是完全可以cover的住的。举个例子，若你接口的请求量很低，干嘛要用集群部署呢处？反而是不是增加了系统的复杂性？浪费资源？所以，做一件事要考虑的东西，一定要结合需求。
var x float32 = 2.26 fmt.</description>
    </item>
    
    <item>
      <title>#26 JWT项目接入的落地方案</title>
      <link>https://maronghe.github.io/2020/26.jwt/</link>
      <pubDate>Mon, 05 Oct 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/26.jwt/</guid>
      <description>JWT 接入 背景 从单体应用架构到分布式应用架构再到微服务架构，应用的安全访问在不断的经受考验。为了适应架构的变化、需求的变化，身份认证与鉴权方案也在不断的变革。面对数十个甚至上百个微服务之间的调用，如何保证高效安全的身份认证？面对外部的服务访问，该如何提供细粒度的鉴权方案？本文将会为大家阐述微服务架构下的安全认证与鉴权方案。 目标 达到接口鉴权，保证系统的安全性 实践  创建验证表 和 表内数据：  CREATE TABLE `blog_auth` ( `id` int unsigned NOT NULL AUTO_INCREMENT, `app_key` varchar(20) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Key&amp;#39;, `app_secret` varchar(50) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Secret&amp;#39;, `sub` varchar(50) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Sub&amp;#39;, `name` varchar(50) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Name&amp;#39;, `is_del` tinyint DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;是否删除&amp;#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB AUTO_INCREMENT = 2 DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &amp;#39;认证管理&amp;#39;; insert into `blog_auth` values(1,&amp;#39;logan&amp;#39;,&amp;#39;loganMasecret&amp;#39;,&amp;#39;gindemo&amp;#39;,&amp;#39;LoganMa&amp;#39;);  安装JWT并在 /internal/model下创建实体类</description>
    </item>
    
    <item>
      <title>#25 Go sync.Pool 对象池</title>
      <link>https://maronghe.github.io/2020/25.pool/</link>
      <pubDate>Mon, 28 Sep 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/25.pool/</guid>
      <description>sync.Pool between 1.12 and 1.13 ​	sync提供强大的‘对象池’，可以重用对象为了减少GC的压力。在使用此包之前，对于你的程序有个性能测试是一个前提。并使用完pool之后，如果你不知道它内部的工作原理，可能会降低你程序的性能。
​	让我们从一个小例子开始。
package pool_test import ( &amp;#34;sync&amp;#34; &amp;#34;testing&amp;#34; ) type Small struct { a int } var pool = sync.Pool{ New: func() interface{} { return new(Small) }, } //go:noinline func inc(s *Small) { s.a++ } func BenchmarkWithoutPool(b *testing.B) { var s *Small for i := 0; i &amp;lt; b.N; i++ { for j := 0; j &amp;lt; 10000; j++ { s = &amp;amp;Small{a: 1} inc(s) } } } func BenchmarkWithPool(b *testing.</description>
    </item>
    
    <item>
      <title>#24 gRPC</title>
      <link>https://maronghe.github.io/2020/24.grpc/</link>
      <pubDate>Tue, 15 Sep 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/24.grpc/</guid>
      <description>安装 个人使用的MBP，所以百度了下Mac上安装protoc命令的过程，参照地址如下：https://blog.csdn.net/u014534808/article/details/80203018
项目结构图 创建.proto文件 syntax = &amp;#34;proto3&amp;#34;; // 指定proto版本 package pb; // 包名 message HelloRequest { string username = 1; // 定义参数 }message HelloResponse { string message = 1; // 定义返回值 }service HelloService { // 定义服务接口  rpc SayHello(HelloRequest) returns (HelloResponse){} rpc SayBye(HelloRequest) returns (HelloResponse){}}​	如上面代码所示，正是gRPC = HTTP2 + Protocol Buffer</description>
    </item>
    
    <item>
      <title>#23 go get 失败问题</title>
      <link>https://maronghe.github.io/2020/23.goget/</link>
      <pubDate>Sun, 23 Aug 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/23.goget/</guid>
      <description> 国内解决go get 下载不下来的问题
 解决方案：配置代理 参照 https://github.com/goproxy/goproxy.cn
macOS 或 Linux 打开你的终端并执行
$ export GO111MODULE=on $ export GOPROXY=https://goproxy.cn 或者
$ echo &amp;quot;export GO111MODULE=on&amp;quot; &amp;gt;&amp;gt; ~/.profile $ echo &amp;quot;export GOPROXY=https://goproxy.cn&amp;quot; &amp;gt;&amp;gt; ~/.profile $ source ~/.profile </description>
    </item>
    
    <item>
      <title>#22 协程同步方式</title>
      <link>https://maronghe.github.io/2020/22.%E5%8D%8F%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 13 Aug 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/22.%E5%8D%8F%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>  waitgroup
 进行goroutine间等待，一般用于分治思想去并发获取数据，应当加限流操作和超时处理。    加锁访问
 map是非并发安全的，那么应当加锁进行并发访问（互斥锁和读写锁的区别） 为什么不用sync.Map进行非加锁访问    atomic原子操作CAS
 使用cpu提供的指令进行不中断的处理。 CPU提供不中断的指令，通过内存同步原语实现    channel
  </description>
    </item>
    
    <item>
      <title>#21 Leetcode 206 链表翻转</title>
      <link>https://maronghe.github.io/2020/21.leetcode-206-%E9%93%BE%E8%A1%A8%E7%BF%BB%E8%BD%AC/</link>
      <pubDate>Sat, 01 Aug 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/21.leetcode-206-%E9%93%BE%E8%A1%A8%E7%BF%BB%E8%BD%AC/</guid>
      <description>Smart clean code
/** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseList(head *ListNode) *ListNode { var p *ListNode for head != nil { head.Next, head, p = p, head.Next, head // ??? 某些人可能困惑在这里  } return p } 尼古拉斯·永强 leave a comment :
​	I learn it from google that the assignment is from the left to the right.</description>
    </item>
    
    <item>
      <title>#20 TCP长链接解决方案</title>
      <link>https://maronghe.github.io/2020/20.tcp%E9%95%BF%E9%93%BE%E6%8E%A5%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sun, 19 Jul 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/20.tcp%E9%95%BF%E9%93%BE%E6%8E%A5%E9%80%9A%E4%BF%A1/</guid>
      <description>TCP长链接通信解决方案记录 bufio -带有缓存区的io
指定一个默认大小的缓冲区的io，进行读取，先从缓冲区读取，缓冲区中没数据之后再更新缓冲区。
默认缓冲区大小为4M，最小为16字节
其提供了更丰富的操作如
如Peek，读一行，读固定字节，读rune，读slice等等，丰富了操作。
我们的系统需要与对方系统同步数据，所以建立TCP长链接进行数据同步比数据轮询来得更有价值些。
TCP基于数据流协议，直接读取的字符流，相较于HTTP，还需要增加额外的HTTP header等不重要的数据进行传输。
那么这一过程有什么问题呢？ 之前的思想是建立好连接之后，直接从io.read中进行读取固定字节大小的slice。
例如从连接中每次读取2M数据。
但是因为TCP中的数据只要不断开，就是无穷无尽的数据。
这就引入了，从无边界的数据，读取数据的问题。既然每次都读2M肯定是行不通的。
因为每次发送的数据不是2M，那么数据就必须要有分隔符。比如加入 \n \0等等。
通过网上的资料来查，这也不是一个好的办法。最终采用了，先传数据大小的header头信息 + body大小，进行计算，再读出指定大小的数据包大小的数据即可。
原本以为这是件很简单事：
创建连接 -》 读数据-》 计算body大小-》读body大小的数据-》解析数据（如存入缓存、队列来异步解析）-》再读header…以次类推。
问题来源：
  连接的维护：TCP连接不是创建好了之后，就永远不会断开。
比如有另外一条连接创建了，对方的服务端会主动断开之前的TCP连接。我们线上有有一次发生这个问题，由于某种事情，导致了部署两套实例。导致后面的数据都同步不过来了。
  粘包等问题：
  粘包是TCP的常见的问题。由于通信双方每次网卡发送的数据不一致，可能回导致发送的数据不被立即写出或等待一会儿一并写出。
  go中的io.read方法官方文档上已经明确指出。当我们想读取pack := make([]byte, 2048)读取2M的数据时。可能会返回
0 &amp;lt;= n &amp;lt;= 2048的读数据大小。也明确指出：当可读区小于想读取的大小数据时，直接返回读到的数据去代替继续等待。所以
这个地方栽跟头了。
  那么最终解决的问题是通过bufio和io.readFull进行解决得。
  bufio会内部会维护一个缓冲区默认为4M，和w和r的变量，作为读到的和使用的指针下标。
 先从缓冲区中读 缓冲区读取不到的话，就利用被封装了的io.read进行读取。    结合io.read问题，可能读取不全。内部利用了io.read去循环读取读取。
  TODO 是否可以对内核进行传递参数，如SOCKET_REUSE等
  </description>
    </item>
    
    <item>
      <title>#19 记一次前端504问题反馈</title>
      <link>https://maronghe.github.io/2020/19.fe504/</link>
      <pubDate>Sun, 05 Jul 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/19.fe504/</guid>
      <description>记一次前端504问题反馈 怪小弟不才，出现问题只能记录与笔记中，方便以后回忆起来。
504 GateWay - Timeout 调用网关超时，也就意味着上游服务器返回超时。如果上游服务器返回了一个无效的相应，那么返回为502，暂且不讨论502。
​	此问题对于前端同学反馈，某接口请求结果，时好时坏（返回成功或请求一直pending）。
所以暂时排除网络的问题。可能是接口内部逻辑问题。
​	通过pprof打印出60秒的profile输出重定向到文件之后下载到本地，通过go tool pprof -http=:6060进行分析。
​	如下图，根据火焰图很明显看出，大部分时间总是在调用**FromCache，从缓存中获取数据，通过Peek和Graph也很容易看出大部分的CPU的时间循环阻塞在哪里。
​	项目中的缓存用的是Redis，如果有Redis监控的话。估计Redis的负载应该会很高。分析了下业务场景。的确有一种情况忘记考虑，会’死递归‘的取数据。通过pprof和 go tool 工具很容易发现程序的问题。真是个大杀器呀！</description>
    </item>
    
    <item>
      <title>#18 Atomic VS Mutex</title>
      <link>https://maronghe.github.io/2020/18.atomic-vs-mutex/</link>
      <pubDate>Mon, 22 Jun 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/18.atomic-vs-mutex/</guid>
      <description>Monitor：都说原子操作比锁更轻量级，为什么更轻量？
Me：&amp;hellip;.（支支吾吾）
原子操作 ​	即进行过程中不能被中断的操作。
为什么不能打断该操作？
​	如今的操作系统，多核处理器盛行，多进程并行？
​	还是多进程每个人任务执行一小段，之后切换到其他的进程或线程继续执行呢？
​	~很显然是第二种~
​	多进程交替运行，因为处理器的处理速度，远远大于CPU人的反应，给人的一种感觉就是多任务同时进行工作。
实现：
​	一般是由独立的CPU指令实现的。
Go中对原子操作的支持 ​	增减、交换、比较交换、存储、加载
增减：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; ) func main() { n := int32(0) wg := sync.WaitGroup{} for i := 0; i &amp;lt; 1000; i++ { wg.Add(1) go func() { //n++ data race 存在数据竞争，最后输出不一定会是1000 	atomic.AddInt32(&amp;amp;n, 1) wg.Done() }() } wg.Wait() fmt.Println(&amp;#34;n&amp;#34;, n) } // go run -race main.go  比较交换（CAS）：</description>
    </item>
    
    <item>
      <title>#17 Redis String</title>
      <link>https://maronghe.github.io/2020/17.redis-string/</link>
      <pubDate>Sun, 14 Jun 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/17.redis-string/</guid>
      <description>Redis数据结构之String Redis是C语言编写的，C语言有字符串，但是Redis并没有采用C的字符串而是自己构建出SDS即简单动态字符串，那么肯定是C的字符串某种情况下不满足Redis的需求，才自己造轮子。
SDS 与 C字符串 区别  长度计算方式  C字符串需要遍历之后，最后是以\0结尾。O(n)时间复杂度才能得出长度。 SDS采用len属性，O(1)时间复杂度获取长度。   杜绝缓冲区溢出 - 字符串拼接未计算好内存可能会导致缓冲区溢出。  C字符串需要计算内存大小。 SDS进行判断free，如果够就拼接，如果不够就扩容。   减少内存分配和回收的开销  C字符串 N+1大小  1为 \0 结束符   SDS  内存预分配 - len + free 避免总是内存分配 惰性释放 - 字符串缩减时，不必立即释放内存，以免再进行分配。     二进制安全  C字符串  音视频中或出现\0的字符串中C字符串比较无力。   SDS  进行长度判断，读取长度的字符串即可。      </description>
    </item>
    
    <item>
      <title>#16 限流方案</title>
      <link>https://maronghe.github.io/2020/16.limiting/</link>
      <pubDate>Wed, 03 Jun 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/16.limiting/</guid>
      <description>限流   定时清除 （1分钟一清除）
 实现简单 对于边界值，如59秒和下一秒会有问题，会得到一个请求限制速率的2倍    滑动窗口（10秒一清除）
 是定时清除的一个优化，缩小了清除粒度但是还是有问题。    漏桶算法 （桶容量 + 桶流速度） https://github.com/uber-go/ratelimit
 超过桶的容量就要涉及到排队或拒绝了   不支持小流量激增    令牌桶算法（定时放入桶中令牌） https://github.com/juju/ratelimit
 支持小流量并发激增    分布式限流则可用于 Redis + Lua脚本实现，其原理几乎差不多。
local key = &amp;#34;rate.limit:&amp;#34; .. KEYS[1] --限流KEY local limit = tonumber(ARGV[1]) --限流大小 local current = tonumber(redis.call(&amp;#39;get&amp;#39;, key) or &amp;#34;0&amp;#34;) if current + 1 &amp;gt; limit then --如果超出限流大小 return 0 else --请求数+1，并设置1秒过期 redis.</description>
    </item>
    
    <item>
      <title>#15 Defer in Golang v1.12 vs v1.13 vs v1.14</title>
      <link>https://maronghe.github.io/2020/15.defer/</link>
      <pubDate>Sun, 31 May 2020 17:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/15.defer/</guid>
      <description>1.12 defer func(){} —&amp;gt; 会被翻译成两个函数
  deferproc() : 注册，defer func(){} 到g的defer链表中，头插法。defer需要进行堆分配，而且参数变量需要进行堆栈间拷贝。
  runtime.deferreturn() : 执行，defer链表的中的每一项
（先注册 -》 后执行）
// runtime/runtime2.go type g struct { ... _panic *_panic _defer *_defer // defer 链表  ... }   步骤解析：
deferproc
 从defer pool预分配不同规格的defer，不满足时再创建，用完再放回池中。 进行堆分配_defer结构体，将参数拷贝到堆上 连接到g的defer链表上  runtime.deferreturn
 执行defer注册的funcval，将堆上的参数拷贝到栈上，进行执行。  注意：
 若其中有发现闭包，堆上分配捕获变量的地址，执行时通过指针加偏移量找到被捕获的变量进行操作 形如defer A(B(a))  函数A需要依赖B的返回值进行堆分配内存大小 所以B函数在注册时候执行，传入变量啊    存在问题：（慢!!!!!）
 defer结构体堆分配，参数需要进行堆栈间拷贝。 GC 链表注册defer信息，执行比较慢。  1.13 性能提升：30%</description>
    </item>
    
    <item>
      <title>#14 TCP &amp; UDP</title>
      <link>https://maronghe.github.io/2020/14.tcpudp/</link>
      <pubDate>Fri, 29 May 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/14.tcpudp/</guid>
      <description>TCP   TCP三次握手机制，为什么要三次握手？
考点：
  为什么要握手？
TCP最重要的特性就是可靠性，自己发出去的数据要等到对方去确认，并回复收到了（ack），TCP是支持双工协议，所以双方都要去维护自己的序列号（seq，不从0开始，随机生成的）。因为要获取序列号（和MSS，滑动窗口），所以要握手。
  为什么要三次？
因为关闭连接的时候，TCP协议允许连接处于半打开（半关闭）状态。而建立连接不允许连接处于半打开状态，所以Server要把自己的序列号回复过来。
    HTTP 缓存处理流程？
Request 中 Cache-Control: max-age=30 ，告诉代理服务器，如果有缓存的话，如果超过30秒时，就不要给Client返回，让代理服务器去原服务器去取。
Response 中的 Cache-Control: max-age=30 ，告诉客户端，只能到30秒，否则将视为过期。
  地址栏输入URL到底发生了什么?
考点：
  应用层
DNS域名解析-》代理服务器 -》可能缓存-&amp;gt;网关（Nginx、Apache）-》Origin Server 【如上图所示】
  请求编码
http://[domain]/[path] -&amp;gt; 转换成 Method ，Path ，Version Protocol，Header等
  网络分层
 TCP解决进程到进程之间的通信 IP 解决主机到主机之间的通信 数据链路层 解决 局域网内部的通信      HTTP长链接有哪些优点？
考点：
1.长链接和短连接的区分？
HTTP Header : connect : close / keepalive</description>
    </item>
    
    <item>
      <title>#13 二叉搜索树（BST）In Go</title>
      <link>https://maronghe.github.io/2020/13.bst/</link>
      <pubDate>Fri, 22 May 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/13.bst/</guid>
      <description>二叉搜索树（Binary Search Tree In Go） 二搜索树叉树特点：
  极端情况下会退化成链表。
  中序遍历是递增的。
  父节点的左孩子都小于父节点，又孩子都大于父节点
  时间复杂度：
  Talk is cheap, show me the code 源码：https://github.com/maronghe/basego/blob/master/ds/binary_search_tree.go
binary_search_tree.go /* * Copyright (c) 2020 RongHe Ma. * Recording from daily work flow. */ package ds import ( &amp;#34;fmt&amp;#34; ) // BST Node type Node struct { data int count int left *Node right *Node } func NewBinarySearchTree(data int) *Node { return &amp;amp;Node{data, 1, nil, nil} } func (node *Node)Insert(data int) *Node { return _insert(node,data) } func _insert(root *Node, data int) *Node{ if root == nil { return NewBinarySearchTree(data) } if root.</description>
    </item>
    
    <item>
      <title>#12 Docker in Hour</title>
      <link>https://maronghe.github.io/2020/12.dockerinhour/</link>
      <pubDate>Wed, 20 May 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/12.dockerinhour/</guid>
      <description>Docker ​	一个统一环境dev/qa/app/beta/cloud的容器、容器是相互隔离的。
​	Docker是容器技术，解决软件跨环境的迁移的问题。
​	Docker安装后，在本地一守护进程(Daemon)的方式后台运行。
-&amp;gt; docker -v Docker version 19.03.8, build afacb8b ​	本地部署的分为image和container，image相当于类，container相当于对象，一个类可以创建多个对象。
image 可来自于docker官方Repository Docker Hub 和 private Repository或阿里云镜像 TODO
镜像命令 docker images // 查看当前已安装的镜像列表 docker search [redis] // 搜索redis镜像 docker pull [redis]:[version] // 不指定version默认下载latest docker rmi [imageId]/[redis]:[version] 容器命令    1 2 3 4 5  docker ps // 查看运行的容器 docker ps -a // 查看所有的容器 docker -run -it[d] --name=[name] /bin/sh // 运行docker -i持续运行 -t分配终端（交互式） -d后台运行（守护式） /bin/sh mac default docker exec [name] /bin/sh // 进入某一运行的容器中 docer [start][stop][rm][inspect] [container-name] // 启动、停止、移除、查看详情           数据卷容器    1 2 3  docker run -it --name c3 -v /volume centos:latest // 创建名为c3的并带有一个/volume的数据卷容器 centos docker run -it --name c1 --volumes-from c3 centos:latest // 创建c1从c3挂载 docker run -it --name c2 --volumes-from c3 centos:latest // 创建c2从c3挂载            Docker的本质</description>
    </item>
    
    <item>
      <title>#11 Golang导包顺序</title>
      <link>https://maronghe.github.io/2020/11.golang%E5%AF%BC%E5%8C%85%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Sun, 10 May 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/11.golang%E5%AF%BC%E5%8C%85%E9%A1%BA%E5%BA%8F/</guid>
      <description>1.包存在哪里？
看段代码，想必大家都知道GoPath和GoRoot的是什么了。（GoPath = 你的工作空间路径 ，GoRoot = Go的安装路径）
func init() { fmt.Printf(&amp;#34;Go Root %s \n&amp;#34;, os.Getenv(&amp;#34;GOROOT&amp;#34;)) // Go Root /usr/local/Cellar/go/1.14/libexec 	fmt.Printf(&amp;#34;Go Path %s \n&amp;#34;, os.Getenv(&amp;#34;GOPATH&amp;#34;)) // Go Path /Users/logan/go } 通过 . 对 “fmt” 进行别名，则不需要使用 fmt.Printf(&amp;quot;...&amp;quot;)了，但一个包中只能有一个.别名否则会报错。同时可以配置多个GoPath用 : 分割，例如 GOPATH=/Users/logan/go:~/myworkspace
2.扫描包的顺序？
import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) 如果搜索net/http包时，搜索顺序如下:
/usr/local/Cellar/go/1.14/libexec/src/net/http /Users/logan/go/src/net/http ~/myworkspace/src/net/http 3.包的导入顺序？及var、const、init()加载顺序。
包导入顺序如图所示，同时可知先初始化const、其次为var、之后为init()，注意同时可以有多个init方法，从上到下依次执行。
4.包重名了怎么办？
import ( &amp;#34;runtime&amp;#34; &amp;#34;strings&amp;#34; strings2 &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) func TestImport(t *testing.T){ strings.PrintlnHello(&amp;#34;Logan&amp;#34;) strings2.Compare(&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;) } 如果包重名了，只能起别名，否则不能识别出是哪个包中的方法需要引用。
5.包导入的”奇淫技巧“
_导入 及 远程包</description>
    </item>
    
    <item>
      <title>#10 Session and Cookie</title>
      <link>https://maronghe.github.io/2020/10.sessionandcookie/</link>
      <pubDate>Sat, 02 May 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/10.sessionandcookie/</guid>
      <description>Session 和 Cookie 看法 首先HTTP协议是无状态的，当我们开发的一些对状态有要求的接口时，Cookie和Session弥补了这一块的能力。
Cookie   对于HTTP协议来说，Cookie只是请求头中的一个字段且与其他字段没什么区别。
  浏览器对Cookie做了默认的支持并限制了Cookie的[同源策略]，即同域才能访问Cookie的内容。
如当我们做SSO（单点登录），一般可以把Cookie种在可访问的一级域名下。
  Session   Session是服务器为每个Web用户分配的独立状态存储空间。
若用户的数据存放在存在某个单点服务器上时，当以七层或四层转发时，请求到后端集群的时候，就存在Session命中的问题（分布式Session问题），这时候需要有中心的方式去统一管理Session，比如存储在DB或缓存中。
  SessionID：可以由标准OAuth 2.0 来实现最终换取token即 sessionId ，并持有过期时间自动刷新逻辑。
  总结： Cookie 和 Session 都是辅助HTTP协议无状态性产生的。</description>
    </item>
    
    <item>
      <title>#8 Study Recording</title>
      <link>https://maronghe.github.io/2020/8.studyrecording/</link>
      <pubDate>Tue, 28 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/8.studyrecording/</guid>
      <description>Q : 怎样知道一个变量分配到堆上还是栈上？
A :编译器首先尝试分配到栈上，但如果编译器不能保证函数返回值是否被引用，那么编译器会分配到堆上。如果一个对象太大了。也会分配到GC堆上。当今的编译器来说，如果一个使用变量的地址，该对象时分配堆上的候选对象，但是逃逸分析后可以识别如果改对象未超过函数的返回范围，那么该变量也可能保存在栈上。
R : https://golang.org/doc/faq#stack_or_heap
  new 和 make 有什么区别
A : new(T)： 分配内存 但初始化仅为0值并返回其指针T和*T（值）。
new(File) =&amp;gt; &amp;amp;File{} // 初始化0值
make(T,args) 仅用于创建 map slice channel，并返回非0值（not zeroed）的类型T（非 *T）
R : https://golang.org/doc/effective_go.html#allocation_new
https://golang.org/doc/effective_go.html#allocation_make
  Go 的内存分配器是基于TCMalloc的一种分配器（TC Malloc Thread-Cached Malloc）
YouTube Link, GopherCon UK 2018
 申请内存顺序    4.Go是一种基于epoll的多路复用IO模型，其TCPListener是对netFD进行封装。
  Sudog的资源池：每个P都有自己的缓冲池和全局调度器缓存池。
 当本地的sudog的缓冲区为0时，加锁去全局调度器sudog的缓冲池去取全局的一半。 否则新创建一个sudog。    go语言编译后成汇编语言。
go tool compile -S file.go</description>
    </item>
    
    <item>
      <title>#9 数组和切片</title>
      <link>https://maronghe.github.io/2020/9.arrayandslice/</link>
      <pubDate>Wed, 22 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/9.arrayandslice/</guid>
      <description>底层结构 创建  var make []int{}   slice扩容 复用底层数组  注意：
 array不能跟nil比较，编译报错 make只能用于 map， channel ，slice的创建，不能创建数组 var arr [5]int 创建数组，初始化为5个零  ​
 数组大小不可变，切片可变 kind 数组 array [2]int , [3]int[] slice slice []int copy 仅能用于slice，并且dst必须要有容量 复用底部数组 t3 := t1[2:4] // 左闭右开 创建  var arr []int // arr == nil true make &amp;amp; []int{} // arr != nil true    arr := [2]int{1, 3} fmt.Println(reflect.ValueOf(arr).Kind()) // array 	fmt.</description>
    </item>
    
    <item>
      <title>#7 Goalng协程和线程</title>
      <link>https://maronghe.github.io/2020/7.goroutine/</link>
      <pubDate>Tue, 21 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/7.goroutine/</guid>
      <description>协程和线程   os线程：每几毫秒，硬件计时器会中断处理器，然后调用schedule的内核函数，挂起当前执行的线程，将状态保存到寄存器中。检查可执行线程列表并决定下一次运行的线程。并从内存中恢复寄存器信息继续执行。因为os线程是被内核锁调度，所以一个线程执行状态切换到另一个线程的执行状态需要切换上下文。也就是说，存储用户线程的状态到寄存器，和回复寄存器中读取状态，更新调度器的速度是很慢的。因为其内部局限性很差，需要访问内存好几次，增加运行运行cpu的周期。
  协程调度：
 Go有自己的调度器，m:n，n个os线程上调度m个协程。调度器的工作和内核的调度是相似的，但调度器只关注go程序中的协程。 和os线程调度不同的是，go并不是一个硬件定时器，而是被go“建筑”本身进行调度的。  比如一个协程执行了time.Sleep()或channel调用或mutex操作阻塞时。调度器会使其进入休眠，并开始执行另一个协程，直到时机到了再去唤醒第一个协程。因为这种调度不需要进入内核的上下文。所以重新调度一个协程要比调度一个线程的代价要低得多。      区别：
 线程是由系统操作系统（os）进行调度的，需要上下文切换 协程一般是由开发者显式调度，避免了上下文切换，从而简化了高并发。[Go并发的实现原理]    传统是多线程，共享内存来实现通信， 例如JAVA，CPP；而go采用CSP，通过通信方式来共享内存。
  Java中在访问共享变量（Map，List等）时需要加锁进行访问，从而也衍生出一种方便操作的数据类型，即线程安全的集合，例如java.util.concurrent.包中的数据结构。
  Go采用CSP，通信来共享内存方式
  Channel 实现原理
Go channel 实现原理分析 - golang开发笔记 - SegmentFault 思否
  数据结构，实际上是基于 RingBuffer Wiki
数据结构的实现
 dataqsiz // 缓冲区容量，循环队列 qcount // 缓冲区的元素个数 Buf unsafe.Pointer // 指向缓冲区，表示一个已经发送但还未接收的数据。 sendx // 下一个可发送的地址 recvx // 下一个可接收的地址 sendq // 发送的sudog列表，当一个发送操作执行时，若缓冲区满了且无接收者在接送，则协程挂起，并将sudog放入sendq中 sudo G - G 代表Goroutine recvq // 接收的sudog列表，当一个接受操作执行时。若缓冲区无数据且无发送者在等待，则协程挂起，并将sudog放入recvq中 closed // 管道是否关闭 elemsize // 元素大小 elemtype // *_type 元素类型 lock mutex // 锁，用于hchan加锁, 限制只能一个goroutine同时访问一个channel    创建channel</description>
    </item>
    
    <item>
      <title>#6 Golang锁</title>
      <link>https://maronghe.github.io/2020/6.mutex/</link>
      <pubDate>Wed, 15 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/6.mutex/</guid>
      <description>Golang锁 RWMutex 读写锁： ​	内部需要维护一个复杂的内部记录。所以适用于并发读取，修改操作比较少的情况，相反，竞争较低相较于互斥锁性能较慢。
​	Mutex 互斥锁：不可重入
​	不可重入的原因：互斥量的目的是为了确保共享变量在程序执行时的关键点上能够保证不变性。不变性的其中之一是“没有goroutine访问共享变量”。
​	但实际上对于mutex保护的变量来说，不变性还包括其它方面。当一个goroutine获得了一个互斥锁时，它会断定这种不变性能够被保持。其获取并保持锁期间，可能会去更新共享变量，这样不变性只是短暂地被破坏。然而当其释放锁之后，它必须保证不变性已经恢复原样。
​	尽管一个可以重入的mutex也可以保证没有其它的goroutine在访问共享变量，但这种方式没法保证这些变量额外的不变性。
​	总结：互斥锁中的互斥量要保证共享变量的不变性，可重入锁可以保证没有其他的goroutine访问共享变量，但不能保证额外变量的不变性。
Mutex锁的实现  加锁 解锁  // sync.Once() TODO type Once struct { m Mutex done uint32 } func (o *Once) Do(f func()) { if atomic.LoadUint32(&amp;amp;o.done) == 1 { return } o.m.Lock() defer o.m.Unlock() if o.done == 0 { defer atomic.StoreUint32(&amp;amp;o.done, 1) f() // 只执行一次  } } </description>
    </item>
    
    <item>
      <title>#5 Go GC</title>
      <link>https://maronghe.github.io/2020/5.go-gc/</link>
      <pubDate>Sat, 11 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/5.go-gc/</guid>
      <description>GC分类：追踪式、引用计数式  追踪式，分为多种不同类型，例如：  标记清扫：从根对象出发，将确定存活的对象进行标记，并清扫可以回收的对象。 标记整理：为了解决内存碎片问题而提出，在标记过程中，将对象尽可能整理到一块连续的内存上。 增量式：将标记与清扫的过程分批执行，每次执行很小的部分，从而增量的推进垃圾回收，达到近似实时、几乎无停顿的目的。 增量整理：在增量式的基础上，增加对对象的整理过程。 分代式：将对象根据存活时间的长短进行分类，存活时间小于某个值的为年轻代，存活时间大于某个值的为老年代，永远不会参与回收的对象为永久代。并根据分代假设（如果一个对象存活时间不长则倾向于被回收，如果一个对象已经存活很长时间则倾向于存活更长时间）对对象进行回收。   引用数：根据对象自身的引用计数来回收，当引用计数归零时立即回收。  Go中使用的GC方式 Go使用无分代、不整理、并发的*三色标记清除法*（与用户代码并发执行）
Because:(反证法)
 对象整理的优势是为了解决内存碎片化的问题和顺序内存分配器。但Go采用tcmalloc，基本上是没有碎片化的对象。顺序内存分配器在多线程下不适用。基于tcmalloc的内存分配算法，对于整理发来说，并不能得到实质的提升。 分代回收基于分代假设，分代假设主要将基于回收精力放到新创建的对象上。而Go创建对象时会进行逃逸分析会把对象尽量的分配到栈上，只有长时间存活的对象才会分配到堆上。那么goroutine死亡后，栈也会直接回收，不会参与GC，那么分代回收没有优势。 go采用与用户并发执行，则STW时间与对象的大小和是否分代，并没有直接关系。go团队使用更好的回收方式（部分CPU执行垃圾回收），而不把暂停回收时间作为唯一标准。  三色标记法  三色标记法是一种描述追踪式垃圾回收的机制的一种方式。它描述了由黑、灰和白色组成（仅为概念），从可能要删除的对象列表中（白色列表），通过_根对象_逐步着色成灰色，最终扫描完成后为黑色，当无灰色对象，其余的白色对象即可回收对象，将被删掉的过程。 根对象有哪些？  栈中的对象 全局变量 寄存器    并发标记回收方式实现的难点 难点：回收的准确性：*不能漏掉可回收对象，也不能多删不可回收对象*
  赋值器的颜色 及 强弱不变性
  强弱不变性
当一下两个条件均满足时，会破坏垃圾回收的正确性。（即对象分配为一个有向图）
条件1：赋值器修改对象图，导致黑对象引用白色对象。
条件2：从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏。
译：
条件1：赋值器修改黑色对象引用白色对象。
条件2：赋值器破坏了未经访问的，灰色对象到白色对象的路径。
当避免条件
避免条件1：则所有白色对象均被引用，没有白色对象会被遗漏。
避免条件2：则从灰色对象出发，总存在一条没有访问过的路径，从而找到白色对象，而不会遗漏白色存活对象。
强不变性：同时满足条件1和条件2。即没有对象会被遗漏，没有未访问的路径会被破坏。弱不变性：满足条件1。即没有对象会被破坏。但不能保证黑色对象引用白色对象。  赋值器分为灰色赋值器（Dijkstra插入屏障）和黑色赋值器（Yuasa 屏障）
1.赋值器的颜色对对象回收的影响
允许灰色赋值器存在
 则必须在回收结束之前重新扫描对象图。 如果重新扫描过程中，发现了新的灰色或白色对象。回收期还需要对新发现的对象进行追踪。但是在追踪新对象过程中，赋值器仍然可以在根中插入新的非黑色的引用，如此往复，直到重新扫描过程没发现新的白色或灰色对象。· ·总结·：允许灰色赋值器存在时，最坏情况下，回收期只能将所有的赋值器线程停止才能完成对对象的完整扫描，也就是STW。  GC触发时机：1.14  主动触发：阻塞等待完成 被动触发  使用系统监控，当超过两分钟没有产生任何GC时强制触发GC。 使用步调（Pacing）算法，其核心思想是控制内存增长比例。      GC关注的指标  CPU利用率（因为并发执行） GC停顿时间 GC停顿频率 GC可扩展性，即回收性能。  GC调优方向 : 优化内存的申请速度，尽可能的少申请内存，复用已申请的内存  大量创建Goroutine，对调度器产生很大的压力。可以批量创建部分的goroutine从而降低调度器调度的压力，从而降低GC时间。 字符串的拼接 + 号，即需要内存拷贝，将内容从原来的内存位置拷贝到新的内存位置。造成大量不必要的内存分配。    GC 触发时间顺序：1.</description>
    </item>
    
    <item>
      <title>#4 最终一致性</title>
      <link>https://maronghe.github.io/2020/4.constant/</link>
      <pubDate>Sun, 05 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/4.constant/</guid>
      <description>最终一致性的讨论 在如今的分布式微服务架构下的系统中，各服务之间都会存在直接或间接的调用。很难免很多的方法调用的方法失败，或因为网络波动等处理不成功。
集中方案，及其优缺点：    方案 优点 不足     saga pattern（个人理解和TCC差不多）：即当发生失败处理是需要调用回滚函数。 可以按照不同的业务逻辑自己西实现回滚逻辑。 1.当系统过于庞大时候，怎么可能保证所有的服务都具备回滚功能？2.回滚失败后，需要人工处理，增加人工介入系统的可能。   可靠MQ + 失败消息落盘，定时重试 + （MQ采用HTTP POST向业务方发送请求，可避免所有服务都使用MQ Client） 解耦、重试 1.生产者的业务执行和Msg发送不是原子性。所以需要MQ支持事务。2.不适用于对消息有顺序性要求的场景。仅试用于简单的情景。3.上游失败落盘、后台发送 + 下游需要处理乱序消息问题。适用于消息定制的不同逻辑。   业务模块中插入多个“桩”，每过一段时间触发状态的全量更新。那么我就找一个其它模块来持续地刷新我系统中的数据状态。从而达到“最终一致”。 根据最终状态判断一致性。 比较反技术，性能全量同步数据需要考虑性能和同步契机。    </description>
    </item>
    
    <item>
      <title>#3 Became A Contributor For Golang</title>
      <link>https://maronghe.github.io/2020/3.contributor/</link>
      <pubDate>Tue, 31 Mar 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/3.contributor/</guid>
      <description>激动的心，颤抖的手。 — 记录了我成为一名Go Contributor 的过程
趁着这个热乎劲，记录一下美好的生活。 ​	非常开心也非常荣幸的正在成为Go的贡献者之一。这可能也是村子走出来的孩子不太懂得世面的第一步吧。
​	2020年03月31日上午正在看着Go Map实现原理时，突然发现Go doc中有一个参数写错了。也可能是修改参数时遗漏了。所以我就小心翼翼的在Go的Github中提出了一个小小的Issue，表明我要修改的内容。若想看问题修改了是什么的话，请点击这里，因为就是一个小小的问题，也算不上是个问题的问题。所以就不罗列于此了。
​	随后我过了几个小时，有一个位Go团队的成员ALTree回复了我的Issue。并说这是一个问题。Yeah sure. Please send a change这是他的原话。
​	那么接下来就是应该提交一个CL，但是我看Code Review上面我当我去执行
`git clone https://go.googlesource.com/go &amp;amp;&amp;amp; (cd go &amp;amp;&amp;amp; f=`git rev-parse –git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f)` 发生了 `fatal: unable to access &amp;#39;https://go.googlesource.com/go/&amp;#39;: Failed to connect to go.googlesource.com port 443: Operation timed out` 操作超时。 ​	搞了半天后，咨询了一下欧神（我的偶像），说我网络可能有问题，并且给了我成为一个Contributor的一个教程。所以按着教程，又做了下Contributor的学习。所以接下来还是应该继续处理TimeOut的问题。
So I need a network helper.</description>
    </item>
    
    <item>
      <title>#2 [踩坑指南] json.Unmarshal后interface{}成map[string]interface{}</title>
      <link>https://maronghe.github.io/2020/2.json/</link>
      <pubDate>Sun, 29 Mar 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/2.json/</guid>
      <description>踩坑第一期 ​	可能大家工作中都会遇到类型断言，即接口类型断言是否为某种strcut类型i.(A)或某种struct的指针类型i.(*A)。
​	那么当一个想要一个interface{}类型既想转换成多种类型，且多种类型并不属于同一种。这句话说的可能比较绕圈，下面举个例子来看下。
​	当有两个SA和SB，当我们想要从字符串翻转成结构体时。我们可以
​	没问题，输出结果是
sa {logan 18 Beijing} PASS ​	但是当结构体内容时由其他结构体，以interface{}类型进行返回时，那么情景可能如下。
​	如果50和51行都注释掉了的话，那么结果会输出
it2 data type is map[string]interface {} ti3 type assertion error, it isn&amp;#39;t type SA ti4 type assertion error, it isn&amp;#39;t type SB ti5 is map[addr:Beijing age:18 name:logan] PASS ​	意味着data转换成了map[string]interface{}如果转换成map[string]interface{}类型后，那么想要key中的value还需要继续类型断言。
​	为什么会转成map[string]interface{}呢？因为对象底层类型，当unmarshal时并不知道对象底层类型。
那么，是否有一种希望转成的类型当我们的确希望转换成某种类型，如SA或SB。
​	答案是需要告诉结构类型的底层类型是什么，才可做此类型的类型断言。
​	解开注释50或51行后，则输出结果成为
it2 data type is *main.SB ti3 type assertion error, it isn&amp;#39;t type SA ti4 is &amp;amp;{logan 18 } ti5 type assertion error, it isn&amp;#39;t type map[string]interface{} PASS 总结：当我们希望类型断言的结构体中是一个interface{}类型时，希望转换成某种我们希望的类型，要进行底层类型的转换。那么就要给Data进行赋值类型。则断言方可成功。 参考内容  https://github.</description>
    </item>
    
    <item>
      <title>#1 第一篇博客 &amp; 回顾我的大学</title>
      <link>https://maronghe.github.io/2020/1.myuniversity/</link>
      <pubDate>Sun, 22 Mar 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/1.myuniversity/</guid>
      <description>第一篇博客 &amp;amp; 回顾我的大学 ​	2020年3月21日晚，参加了Go夜读两周年的回顾。也是第82期的Go夜读share。虽然加入这个大家庭才不长时间，学习Golang这门语言也不是很久，因为之前做Java相关的工作。后期因为组织架构调整，公司要用Go去重写Java的服务，正因为如此，好些人都去转Go或离职。我也踏上了学习Golang的旅程。
自述大学 我的大学专业是IOT，也就是物联网工程，一个软硬件都需要掌握的一个专业，我也相信是未来的趋势。但我从事了软件开发行业，也不知道算不算上所谓的”科班出身“。
大学大一度过的很”轻松加愉快“，仅参加了学校的《舞蹈社》（很奇怪，为什么一个Coder会参加舞蹈社，这可能与上高中之前的认知比较少有关吧，暂不讨论）。相反学习Software的知识比较少。
大二的我知道毕业时不能以在大学玩得好才能找到一份好工作的。后来经过我的DB老师的指导，自学了Java、JSP，记得当时大二的寒假，跟着老师去图书馆借了一本JSP相关的书籍，回家“啃”了起来。殊不知对于一个高中贪玩，大学以为“解放”了自己的我来说，啃书是多么的痛苦。正如我所料，我的进度比较慢，相当于把一本书分了40多份，每份是一天的消化的量。看完即完成了任务。这也是我自学之路的一个开始，但如今的我深知，如果自学都学不会的话，也不适合做Coder相关的工作。下学习又学了Java，DB等，但是看起来都只是学了个表面。
大三跟着老师做了个项目，名为《在线考试系统》，可想而知，在线考试系统即为学校教师出题，学生答题等一系列的相关的操作。这个项目做起来，很多的是在写业务，写逻辑。对于Spring原理来讲根本就没去了解。当时只记得一句话，‘在出校门的时候，自己有项目经历和没有项目经历完全是不一样的’。所以，乐此不疲的把这个项目做来做去。最终主要的功能也都做完了。相反，自己的DB底层原理，数据结构及算法和框架原理性的知识都被忽略了。后期才知道，毕业的春招和秋招对于应届生来讲，就考的是算法和数据结构和一些底层的原理知识。那么我一年多都是白干了么？不会吧？可能吧。不后悔不怪罪，这也是一个人渐渐成熟的体现吧。
大四有的同学继续考研，有的去找工作。我就是陷入了找工作的道路上。记得面试了20天左右。一个offer都没有收到，也正是我在家里的时候，IBM人力资源部给我打电话邀请我参加面试。我遍立刻答应了。一想IBM是外企大厂，以后说出去也有面子（当时无知的我）。可惜只是一个边缘部门吧。没学到什么知识，只了解的外企的文化（不加班就是个最大的特点）。所以，我觉得不能无为了，遍自学起了Java原理、设计模式、DB底层结构、Hadoop（HDFS、MapReduce）等。每日坚持9点去上班，23点才下班让的决心（当时我正式上班时间为下午2点到晚上11点，也腾出很多自学的时间）。后来请假去北京面试一周，最后也是来到了现在的公司，工作至今。
未来的展望和建议 ​	最后，想说这路上自己的认知发生的不断的变化。眼光看的也越来越长远了起来。想建议未来的我和其他的人，要把眼光放长远了。自己的路只能自己走，不要想着依赖谁，不要做“拿来党”，每个人都是时间都是有限的，不要辜负年轻时的自己。趁着年轻，多折腾折腾。
​	2020-03-22 18:07:13 于北京 马荣贺 Logan.Ma</description>
    </item>
    
  </channel>
</rss>
