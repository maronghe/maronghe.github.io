<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LoganMa&#39;s Blog</title>
    <link>https://maronghe.github.io/</link>
    <description>Recent content on LoganMa&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 27 May 2020 00:28:36 +0800</lastBuildDate>
    
	<atom:link href="https://maronghe.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>523</title>
      <link>https://maronghe.github.io/archives/2020/leetcode/523/</link>
      <pubDate>Wed, 27 May 2020 00:28:36 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/leetcode/523/</guid>
      <description>// 523. 连续的子数组和 package s // (rem + n*k) % k = rem func checkSubarraySum(nums []int, k int) bool { m := make(map[int]int) m[0] = -1 sum := 0 for i := 0; i &amp;lt; len(nums); i++ { sum += nums[i] if k != 0 { sum = sum % k } if n, ok := m[sum]; ok { if i-n &amp;gt; 1 {</description>
    </item>
    
    <item>
      <title>#15 二叉搜索树（BST）In Go</title>
      <link>https://maronghe.github.io/archives/2020/03/15/</link>
      <pubDate>Sun, 19 Apr 2020 16:08:53 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/15/</guid>
      <description>二叉搜索树（Binary Search Tree In Go） ​ 二搜索树叉树特点： 极端情况下会退化成链表。 中序遍历是递增的。 父节点的左孩子都小于父节点，又孩子都大于父</description>
    </item>
    
    <item>
      <title>#14 Docker In Hour</title>
      <link>https://maronghe.github.io/archives/2020/03/14/</link>
      <pubDate>Fri, 17 Apr 2020 16:08:53 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/14/</guid>
      <description>Docker 一个统一环境dev/qa/app/beta/cloud的容器、容器是相互隔离的。 Docker是容器技术，解决软件跨环境的迁移的问题。 Doc</description>
    </item>
    
    <item>
      <title>#13 Go 导包（Import）顺序</title>
      <link>https://maronghe.github.io/archives/2020/03/13/</link>
      <pubDate>Mon, 06 Apr 2020 16:08:53 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/13/</guid>
      <description>1.包存在哪里？ ​ 看段代码，想必大家都知道GoPath和GoRoot的是什么了。（GoPath = 你的工作空间路径 ，GoRoot = Go的安装路</description>
    </item>
    
    <item>
      <title>#11 Session与Cookie的区别</title>
      <link>https://maronghe.github.io/archives/2020/03/11/</link>
      <pubDate>Mon, 06 Apr 2020 15:48:01 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/11/</guid>
      <description>Session 和 Cookie 看法 首先HTTP协议是无状态的，当我们开发的一些对状态有要求的接口时，Cookie和Session弥补了这一块的能力。 Cookie 对于HTTP协</description>
    </item>
    
    <item>
      <title>#2 [采坑指南] json.Unmarshal后interface{}成map[string]interface{}</title>
      <link>https://maronghe.github.io/archives/2020/03/2/</link>
      <pubDate>Sun, 29 Mar 2020 23:43:01 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/2/</guid>
      <description>​ 可能大家工作中都会遇到类型断言，即接口类型断言是否为某种strcut类型i.(A)或某种struct的指针类型i.(*A)。 那么当一个想要</description>
    </item>
    
    <item>
      <title>#1 第一篇博客 &amp; 回顾我的大学</title>
      <link>https://maronghe.github.io/archives/2020/03/1/</link>
      <pubDate>Sun, 22 Mar 2020 15:48:01 +0800</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/1/</guid>
      <description>​ 2020年3月21日晚，参加了Go夜读两周年的回顾。也是第82期的Go夜读share。虽然加入这个大家庭才不长时间，学习Golang这门语</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/10/</guid>
      <description>title: &amp;ldquo;#10 Study Recording&amp;rdquo; date: 2020-04-3T12:39:01+08:00 draft: true Q : 怎样知道一个变量分配到堆上还是栈上？ A :编译器首先尝试分配到栈上，但如果编译器不能保证函数返回值是否被引用，那么编译器会</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/18/</guid>
      <description>创建路径/data本地： mkdir -p /Users/logan/dev/workspace/mysql-docker/data3307 mkdir -p /Users/logan/dev/workspace/mysql-docker/data3308 创建配置文件： vim /Users/logan/dev/workspace/mysql-docker/my3307.cnf # msyql 3307的配置： [mysqld] pid-file = /var/run/mysqld/mysqld.pid socket = /var/run/mysqld/mysqld.sock datadir = /var/lib/mysql server-id = 1 log_bin = mysql-bin binlog_format = ROW expire_logs_days = 30 vim /Users/logan/dev/workspace/mysql-docker/my3308.cnf # msyql 3308的配置</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/19/</guid>
      <description>docker run --name myredis -p 6380:6379 -d -v /Users/logan/dev/workspace/redis-docker:/data redis:latest --appendonly yes .... 127.0.0.1:6380&amp;gt; zadd zlist 128 hhhh (integer) 1 127.0.0.1:6380&amp;gt; object encoding zlist &amp;#34;ziplist&amp;#34; 127.0.0.1:6380&amp;gt; ZCARD zlist (integer) 128 127.0.0.1:6380&amp;gt; zadd zlist 140 hqhhh (integer) 1 127.0.0.1:6380&amp;gt; object encoding zlist &amp;#34;skiplist&amp;#34; 127.0.0.1:6380&amp;gt; ZCARD zlist (integer) 129 .... 结论，超过128之后或超过单node64字节</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/20/</guid>
      <description>DIstributed Cron Job In Micor 定时任务几乎在所有的项目后台存在，可能在特定是时间执行一次或周期性的执行。 单机 ​ 在单机中的服务中，一般定时任务是直截了当和简单的。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/21/</guid>
      <description>8根 地址总线只有八位 即 1字节 【0,255】 256 是8根地址总线的最大寻址空间 32根 32位 4G 最大寻址空间 每次操作4字节 （机器字长）就需要32位数据</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/https/</guid>
      <description>前端工程化 HTTP 2.0 HTTPs HTTP 1.0 1.1 1.1 // HTTPs = HTTP + SSL HTTP 2.0 首部压缩 多路复用 二进制分帧 服务端推送 cookie header -》 20 ok 2 byte 22 = 2 + 20 ​ http 1.1 client &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; server http -&amp;gt; tcp tcp 3 4 1.0 短连接 1.1 长链</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/lx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/lx/</guid>
      <description>项目启动 main.go -&amp;gt; 1.初始化qLog （日志地址、队列大小、并发标识、最小日志级别） 2.init etcd 3. init infra-components ？ 4.init project config（cmd -&amp;gt; etcd -&amp;gt; default） ope</description>
    </item>
    
    <item>
      <title></title>
      <link>https://maronghe.github.io/archives/2020/03/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maronghe.github.io/archives/2020/03/untitled/</guid>
      <description>自我介绍 ​ 莫愁前方无知己，天下谁人不识君。 ​ 面试官您好，我叫马荣贺，毕业于&amp;hellip;&amp;hellip;..，目前就职于蓝信移动有限公司，</description>
    </item>
    
  </channel>
</rss>