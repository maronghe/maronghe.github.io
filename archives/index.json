[
    {
        "ref": "https://maronghe.github.io/archives/2020/03/14/",
        "title": "#14 Docker In Hour",
        "section": "archives",
        "tags": null,
        "date" : "2020.04.17",
        "body": " Docker\n 一个统一环境dev/qa/app/beta/cloud的容器、容器是相互隔离的。\nDocker是容器技术，解决软件跨环境的迁移的问题。\nDocker安装后，在本地一守护进程(Daemon)的方式后台运行。\n-\u0026gt; docker -v Docker version 19.03.8, build afacb8b 本地部署的分为image和container，image相当于类，container相当于对象，一个类可以创建多个对象。\nimage 可来自于docker官方Repository Docker Hub 和 private Repository或阿里云镜像 TODO\n镜像命令\ndocker images // 查看当前已安装的镜像列表 docker search [redis] // 搜索redis镜像 docker pull [redis]:[version] // 不指定version默认下载latest docker rmi [imageId]/[redis]:[version] 容器命令\ndocker ps // 查看运行的容器docker ps -a // 查看所有的容器docker -run -it[d] --name=[name] /bin/sh // 运行docker -i持续运行 -t分配终端（交互式） -d后台运行（守护式） /bin/sh mac defaultdocker exec [name] /bin/sh // 进入某一运行的容器中docer [start][stop][rm][inspect] [container-name] // 启动、停止、移除、查看详情数据卷容器\ndocker run -it --name c3 -v /volume centos:latest // 创建名为c3的并带有一个/volume的数据卷容器 centos docker run -it --name c1 --volumes-from c3 centos:latest // 创建c1从c3挂载 docker run -it --name c2 --volumes-from c3 centos:latest // 创建c2从c3挂载  Docker的本质\n  创建新的镜像\n 1.容器转为镜像\ndocker commit 容器id 镜像名字:版本号 docker save -o 压缩文件名称 镜像名字:版本号 docker load -i 压缩文件名称 Dockerfile  FROM centos:latest MAINTAINER maronghe \u0026lt;loganma0209@gmail.com\u0026gt; RUN yum install -y vim # 安装 vim WORKDIR /usr #设置默认目录为/usr CMD /bin/bash docker build -f centos_dockerfile -t logan_centos:0.0.1 .\t// build dockerfile 创建镜像 容器复用宿主机的内核。\n总结：\n"
    }
,
    {
        "ref": "https://maronghe.github.io/archives/2020/03/13/",
        "title": "#13 Go 导包（Import）顺序",
        "section": "archives",
        "tags": null,
        "date" : "2020.04.06",
        "body": "1.包存在哪里？\n​\t看段代码，想必大家都知道GoPath和GoRoot的是什么了。（GoPath = 你的工作空间路径 ，GoRoot = Go的安装路径）\nimport ( . \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func init() { Printf(\u0026#34;Go Root %s \\n\u0026#34;, os.Getenv(\u0026#34;GOROOT\u0026#34;)) // Go Root /usr/local/Cellar/go/1.14/libexec  Printf(\u0026#34;Go Path %s \\n\u0026#34;, os.Getenv(\u0026#34;GOPATH\u0026#34;)) // Go Path /Users/logan/go } 通过 . 对 \u0026ldquo;fmt\u0026rdquo; 进行别名，则不需要使用 fmt.Printf(\u0026quot;...\u0026quot;)了，但一个包中只能有一个.别名否则会报错。同时可以配置多个GoPath用 : 分割，例如 GOPATH=/Users/logan/go:~/myworkspace\n2.扫描包的顺序？\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) 如果搜索net/http包时，搜索顺序如下:\n/usr/local/Cellar/go/1.14/libexec/src/net/http /Users/logan/go/src/net/http ~/myworkspace/src/net/http 3.包的导入顺序？及var、const、init()加载顺序。\n包导入顺序如图所示，同时可知先初始化const、其次为var、之后为init()，注意同时可以有多个init方法，从上到下依次执行。\n4.包重名了怎么办？\nimport ( \u0026#34;runtime\u0026#34; \u0026#34;strings\u0026#34; strings2 \u0026#34;strings\u0026#34; \u0026#34;testing\u0026#34; ) func TestImport(t *testing.T){ strings.PrintlnHello(\u0026#34;Logan\u0026#34;) strings2.Compare(\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;) } 如果包重名了，只能起别名，否则不能识别出是哪个包中的方法需要引用。\n5.包导入的”奇淫技巧“\n​\t_导入 及 远程包\n_ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; // 导入mysql驱动 仅需要依赖执行github.com/go-sql-driver/mysql中的初始化init()函数\n编译期加载  var ( // 常量，数值、字符(runes)、字符串或布尔值等 \ti = 1\u0026lt;\u0026lt;3 ) 运行期加载，如：  math.Sin(math.Pi/4)  参考连接：\n https://www.cnblogs.com/f-ck-need-u/p/9847554.html  "
    }
,
    {
        "ref": "https://maronghe.github.io/archives/2020/03/11/",
        "title": "#11 Session与Cookie的区别",
        "section": "archives",
        "tags": null,
        "date" : "2020.04.06",
        "body": " Session 和 Cookie 看法\n 首先HTTP协议是无状态的，当我们开发的一些对状态有要求的接口时，Cookie和Session弥补了这一块的能力。\nCookie\n  对于HTTP协议来说，Cookie只是请求头中的一个字段且与其他字段没什么区别。\n  浏览器对Cookie做了默认的支持并限制了Cookie的[同源策略]，即同域才能访问Cookie的内容。\n如当我们做SSO（单点登录），一般可以把Cookie种在可访问的一级域名下。\n  Session\n  Session是服务器为每个Web用户分配的独立状态存储空间。\n若用户的数据存放在存在某个单点服务器上时，当以七层或四层转发时，请求到后端集群的时候，就存在Session命中的问题（分布式Session问题），这时候需要有中心的方式去统一管理Session，比如存储在DB或缓存中。\n  SessionID：可以由标准OAuth 2.0 来实现最终换取 token 即 sessionId ，并持有过期时间自动刷新逻辑。\n  总结：\n​\tCookie 和 Session 都是辅助HTTP协议无状态性产生的。\n"
    }
,
    {
        "ref": "https://maronghe.github.io/archives/2020/03/2/",
        "title": "#2 [采坑指南] json.Unmarshal后interface{}成map[string]interface{}",
        "section": "archives",
        "tags": null,
        "date" : "2020.03.29",
        "body": "​\t可能大家工作中都会遇到类型断言，即接口类型断言是否为某种strcut类型i.(A)或某种struct的指针类型i.(*A)。\n那么当一个想要一个interface{}类型既想转换成多种类型，且多种类型并不属于同一种。这句话说的可能比较绕圈，下面举个例子来看下。\n当有两个SA和SB，当我们想要从字符串翻转成结构体时。我们可以\n没问题，输出结果是\nsa {logan 18 Beijing} PASS 但是当结构体内容时由其他结构体，以interface{}类型进行返回时，那么情景可能如下。\n如果50和51行都注释掉了的话，那么结果会输出\nit2 data type is map[string]interface {} ti3 type assertion error, it isn't type SA ti4 type assertion error, it isn't type SB ti5 is map[addr:Beijing age:18 name:logan] PASS 意味着data转换成了map[string]interface{}如果转换成map[string]interface{}类型后，那么想要key中的value还需要继续类型断言。\n为什么会转成map[string]interface{}呢？因为对象底层类型，当unmarshal时并不知道对象底层类型。\n那么，是否有一种希望转成的类型当我们的确希望转换成某种类型，如SA或SB。\n答案是需要告诉结构类型的底层类型是什么，才可做此类型的类型断言。\n解开注释50或51行后，则输出结果成为\nit2 data type is *main.SB ti3 type assertion error, it isn't type SA ti4 is \u0026amp;{logan 18 } ti5 type assertion error, it isn't type map[string]interface{} PASS 总结：当我们希望类型断言的结构体中是一个interface{}类型时，希望转换成某种我们希望的类型，要进行底层类型的转换。那么就要给Data进行赋值类型。则断言方可成功。\n 参考内容\n  https://github.com/maronghe/todo-list/issues/5 https://stackoverflow.com/questions/43325288/golang-convert-interface-to-struct/43325450 https://play.golang.org/p/6fOr0rFV_e1  "
    }
,
    {
        "ref": "https://maronghe.github.io/archives/2020/03/1/",
        "title": "#1 第一篇博客 \u0026 回顾我的大学",
        "section": "archives",
        "tags": null,
        "date" : "2020.03.22",
        "body": "​\t2020年3月21日晚，参加了Go夜读两周年的回顾。也是第82期的Go夜读share。虽然加入这个大家庭才不长时间，学习Golang这门语言也不是很久，因为之前做Java相关的工作。后期因为组织架构调整，公司要用Go去重写Java的服务，正因为如此，好些人都去转Go或离职。我也踏上了学习Golang的旅程。\n 自述大学\n ​\t我的大学专业是IOT，也就是物联网工程，一个软硬件都需要掌握的一个专业，我也相信是未来的趋势。但我从事了软件开发行业，也不知道算不算上所谓的”科班出身“。\n​\t大学大一度过的很”轻松加愉快“，仅参加了学校的《舞蹈社》（很奇怪，为什么一个Coder会参加舞蹈社，这可能与上高中之前的认知比较少有关吧，暂不讨论）。相反学习Software的知识比较少。\n​\t大二的我知道毕业时不能以在大学玩得好才能找到一份好工作的。后来经过我的DB老师的指导，自学了Java、JSP，记得当时大二的寒假，跟着老师去图书馆借了一本JSP相关的书籍，回家“啃”了起来。殊不知对于一个高中贪玩，大学以为“解放”了自己的我来说，啃书是多么的痛苦。正如我所料，我的进度比较慢，相当于把一本书分了40多份，每份是一天的消化的量。看完即完成了任务。这也是我自学之路的一个开始，但如今的我深知，如果自学都学不会的话，也不适合做Coder相关的工作。下学习又学了Java，DB等，但是看起来都只是学了个表面。\n​\t大三跟着老师做了个项目，名为《在线考试系统》，可想而知，在线考试系统即为学校教师出题，学生答题等一系列的相关的操作。这个项目做起来，很多的是在写业务，写逻辑。对于Spring原理来讲根本就没去了解。当时只记得一句话，‘在出校门的时候，自己有项目经历和没有项目经历完全是不一样的’。所以，乐此不疲的把这个项目做来做去。最终主要的功能也都做完了。相反，自己的DB底层原理，数据结构及算法和框架原理性的知识都被忽略了。后期才知道，毕业的春招和秋招对于应届生来讲，就考的是算法和数据结构和一些底层的原理知识。那么我一年多都是白干了么？不会吧？可能吧。不后悔不怪罪，这也是一个人渐渐成熟的体现吧。\n​\t大四有的同学继续考研，有的去找工作。我就是陷入了找工作的道路上。记得面试了20天左右。一个offer都没有收到，也正是我在家里的时候，IBM人力资源部给我打电话邀请我参加面试。我遍立刻答应了。一想IBM是外企大厂，以后说出去也有面子（当时无知的我）。可惜只是一个边缘部门吧。没学到什么知识，只了解的外企的文化（不加班就是个最大的特点）。所以，我觉得不能无为了，遍自学起了Java原理、设计模式、DB底层结构、Hadoop（HDFS、MapReduce）等。每日坚持9点去上班，23点才下班让的决心（当时我正式上班时间为下午2点到晚上11点，也腾出很多自学的时间）。后来请假去北京面试一周，最后也是来到了现在的公司，工作至今。\n 未来的展望和建议\n ​\t最后，想说这路上自己的认知发生的不断的变化。眼光看的也越来越长远了起来。想建议未来的我和其他的人，要把眼光放长远了。自己的路只能自己走，不要想着依赖谁，不要做“拿来党”，每个人都是时间都是有限的，不要辜负年轻时的自己。趁着年轻，多折腾折腾。\n2020-03-22 18:07:13 于北京 马荣贺 Logan Ma\n"
    }
,
    {
        "ref": "https://maronghe.github.io/archives/2020/03/10/",
        "title": "",
        "section": "archives",
        "tags": null,
        "date" : "0001.01.01",
        "body": "title: \u0026ldquo;#10 Study Recording\u0026rdquo; date: 2020-04-3T12:39:01+08:00 draft: true\n   Q : 怎样知道一个变量分配到堆上还是栈上？\nA :编译器首先尝试分配到栈上，但如果编译器不能保证函数返回值是否被引用，那么编译器会分配到堆上。如果一个对象太大了。也会分配到GC堆上。当今的编译器来说，如果一个使用变量的地址，该对象时分配堆上的候选对象，但是逃逸分析后可以识别如果改对象未超过函数的返回范围，那么该变量也可能保存在栈上\nR : https://golang.org/doc/faq#stack_or_heap\n  new 和 make 有什么区别\nA : new(T)： 分配内存 但初始化仅为0值并返回其指针T和*T（值）。\n​\tnew(File) =\u0026gt; \u0026amp;File{} // 初始化0值\n​\tmake(T,args) 仅用于创建 map slice channel，并返回非0值（not zeroed）的类型T（非 *T）\nR : https://golang.org/doc/effective_go.html#allocation_new\n​\thttps://golang.org/doc/effective_go.html#allocation_make\n  Go 的内存分配器是基于TCMalloc的一种分配器（TC Malloc Thread-Cached Malloc）\n​\tYouTube Link, GopherCon UK 2018\n 申请内存顺序    4.Go是一种基于epoll的多路复用IO模型，其TCPListener是对netFD进行封装。\n Sudog的资源池：每个P都有自己的缓冲池和全局调度器缓存池。\n 当本地的sudog的缓冲区为0时，加锁去全局调度器sudog的缓冲池去取全局的一半。 否则新创建一个sudog。    go语言编译后成汇编语言。\ngo tool compile -S file.go\n  "
    }
,
    {
        "ref": "https://maronghe.github.io/archives/2020/03/untitled/",
        "title": "",
        "section": "archives",
        "tags": null,
        "date" : "0001.01.01",
        "body": " 自我介绍\n ​\t莫愁前方无知己，天下谁人不识君。\n​\t面试官您好，我叫马荣贺，毕业于\u0026hellip;\u0026hellip;..，目前就职于蓝信移动有限公司，从事服务端研发相关的工作。工作日常负责项目的评审、研发及后期的维护。\n​\t学习就要有节奏，有方向的进行。给自己顶一个短期计划，如三天，一周，半个月等。不能为了面试而学习这样只会让自己在临近工作做不下去，或想找工作之气临时抱佛脚。游戏切记成瘾！\n​\t学习是要有自我分析理解的过程，看网上的某些教程视频，人家仅会给你他理解到的内容，可能会有些不准确，也可能会有些偏差，当他给你讲述的同时，你可能理解有偏差。这样的话，你与其他人交流时，由于没有自己分析和摸索知识的过程，会显得格外的“虚”，不懂原理，不知其所以然。\n​\t所以学习还是要通过自己的一点一滴积累，寻求权威的认证，最不断地求知精神。同样在生活中多应该问问自己：“为什么？”，为什么这样做就可以，多思考，多探索。学习后要有些输出如博客等。也可以与组内和朋友交流，如果你能给其他人以通俗易懂的方式讲明白了。那么就证明你明白了。\n​\t分析问题的过程：\n  为什么这么做？\n  解决了哪些问题？\n  逻辑和技术难点？\n  自己做出了哪些事情？\n如：『原因』系统为了解决用户的客户端APP连接会话不在线，同样可以将消息发送到对方手机上。「解决方案」从而引入了手机厂商的Push服务，可在用户登录时，端上调用手机厂商提供的结构，创建自己的手机的设备Token，将Token上传到自己的Server去维护。则服务端在发消息的同时可确定是否要发送系统Push来通知用户客户端。「性能提升」通过Push的接口的性能测试，可判别出Push服务的性能，从而发现性能瓶颈，解决和优化。\n   计算机组成原理 操作系统 数据结构与算法 计算机网络（） 数据库原理 Go语言实现原理及新特性 Docker、K8S容器化、Service Mesh Redis、Kafka、ZK、ES、Nginx、Kibana、jenkins中间件 分布式、RPC、微服务链路追踪 网络安全攻击 性能测试 自定义协议  "
    }
]
