<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 马荣贺&#39;s Home, You are my Homie!</title>
    <link>https://maronghe.github.io/categories/golang/</link>
    <description>Recent content in golang on 马荣贺&#39;s Home, You are my Homie!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 18:36:00 +0200</lastBuildDate><atom:link href="https://maronghe.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#25 Go sync.Pool 对象池</title>
      <link>https://maronghe.github.io/2020/25.pool/</link>
      <pubDate>Mon, 28 Sep 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/25.pool/</guid>
      <description>sync.Pool between 1.12 and 1.13 ​	sync提供强大的‘对象池’，可以重用对象为了减少GC的压力。在使用此包之前，对于你的程序有个性能测试是一个前提。并使用完pool之后，如果你不知道它内部的工作原理，可能会降低你程序的性能。
​	让我们从一个小例子开始。
package pool_test import ( &amp;#34;sync&amp;#34; &amp;#34;testing&amp;#34; ) type Small struct { a int } var pool = sync.Pool{ New: func() interface{} { return new(Small) }, } //go:noinline func inc(s *Small) { s.a++ } func BenchmarkWithoutPool(b *testing.B) { var s *Small for i := 0; i &amp;lt; b.N; i++ { for j := 0; j &amp;lt; 10000; j++ { s = &amp;amp;Small{a: 1} inc(s) } } } func BenchmarkWithPool(b *testing.</description>
    </item>
    
    <item>
      <title>#24 gRPC</title>
      <link>https://maronghe.github.io/2020/24.grpc/</link>
      <pubDate>Tue, 15 Sep 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/24.grpc/</guid>
      <description>安装 个人使用的MBP，所以百度了下Mac上安装protoc命令的过程，参照地址如下：https://blog.csdn.net/u014534808/article/details/80203018
项目结构图 创建.proto文件 syntax = &amp;#34;proto3&amp;#34;; // 指定proto版本 package pb; // 包名 message HelloRequest { string username = 1; // 定义参数 }message HelloResponse { string message = 1; // 定义返回值 }service HelloService { // 定义服务接口  rpc SayHello(HelloRequest) returns (HelloResponse){} rpc SayBye(HelloRequest) returns (HelloResponse){}}​	如上面代码所示，正是gRPC = HTTP2 + Protocol Buffer</description>
    </item>
    
    <item>
      <title>#23 go get 失败问题</title>
      <link>https://maronghe.github.io/2020/23.goget/</link>
      <pubDate>Sun, 23 Aug 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/23.goget/</guid>
      <description> 国内解决go get 下载不下来的问题
 解决方案：配置代理 参照 https://github.com/goproxy/goproxy.cn
macOS 或 Linux 打开你的终端并执行
$ export GO111MODULE=on $ export GOPROXY=https://goproxy.cn 或者
$ echo &amp;quot;export GO111MODULE=on&amp;quot; &amp;gt;&amp;gt; ~/.profile $ echo &amp;quot;export GOPROXY=https://goproxy.cn&amp;quot; &amp;gt;&amp;gt; ~/.profile $ source ~/.profile </description>
    </item>
    
    <item>
      <title>#22 协程同步方式</title>
      <link>https://maronghe.github.io/2020/22.%E5%8D%8F%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 13 Aug 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/22.%E5%8D%8F%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>  waitgroup
 进行goroutine间等待，一般用于分治思想去并发获取数据，应当加限流操作和超时处理。    加锁访问
 map是非并发安全的，那么应当加锁进行并发访问（互斥锁和读写锁的区别） 为什么不用sync.Map进行非加锁访问    atomic原子操作CAS
 使用cpu提供的指令进行不中断的处理。 CPU提供不中断的指令，通过内存同步原语实现    channel
  </description>
    </item>
    
    <item>
      <title>#18 Atomic VS Mutex</title>
      <link>https://maronghe.github.io/2020/18.atomic-vs-mutex/</link>
      <pubDate>Mon, 22 Jun 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/18.atomic-vs-mutex/</guid>
      <description>Monitor：都说原子操作比锁更轻量级，为什么更轻量？
Me：&amp;hellip;.（支支吾吾）
原子操作 ​	即进行过程中不能被中断的操作。
为什么不能打断该操作？
​	如今的操作系统，多核处理器盛行，多进程并行？
​	还是多进程每个人任务执行一小段，之后切换到其他的进程或线程继续执行呢？
​	~很显然是第二种~
​	多进程交替运行，因为处理器的处理速度，远远大于CPU人的反应，给人的一种感觉就是多任务同时进行工作。
实现：
​	一般是由独立的CPU指令实现的。
Go中对原子操作的支持 ​	增减、交换、比较交换、存储、加载
增减：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; ) func main() { n := int32(0) wg := sync.WaitGroup{} for i := 0; i &amp;lt; 1000; i++ { wg.Add(1) go func() { //n++ data race 存在数据竞争，最后输出不一定会是1000 	atomic.AddInt32(&amp;amp;n, 1) wg.Done() }() } wg.Wait() fmt.Println(&amp;#34;n&amp;#34;, n) } // go run -race main.go  比较交换（CAS）：</description>
    </item>
    
    <item>
      <title>#15 Defer in Golang v1.12 vs v1.13 vs v1.14</title>
      <link>https://maronghe.github.io/2020/15.defer/</link>
      <pubDate>Sun, 31 May 2020 17:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/15.defer/</guid>
      <description>1.12 defer func(){} —&amp;gt; 会被翻译成两个函数
  deferproc() : 注册，defer func(){} 到g的defer链表中，头插法。defer需要进行堆分配，而且参数变量需要进行堆栈间拷贝。
  runtime.deferreturn() : 执行，defer链表的中的每一项
（先注册 -》 后执行）
// runtime/runtime2.go type g struct { ... _panic *_panic _defer *_defer // defer 链表  ... }   步骤解析：
deferproc
 从defer pool预分配不同规格的defer，不满足时再创建，用完再放回池中。 进行堆分配_defer结构体，将参数拷贝到堆上 连接到g的defer链表上  runtime.deferreturn
 执行defer注册的funcval，将堆上的参数拷贝到栈上，进行执行。  注意：
 若其中有发现闭包，堆上分配捕获变量的地址，执行时通过指针加偏移量找到被捕获的变量进行操作 形如defer A(B(a))  函数A需要依赖B的返回值进行堆分配内存大小 所以B函数在注册时候执行，传入变量啊    存在问题：（慢!!!!!）
 defer结构体堆分配，参数需要进行堆栈间拷贝。 GC 链表注册defer信息，执行比较慢。  1.13 性能提升：30%</description>
    </item>
    
    <item>
      <title>#11 Golang导包顺序</title>
      <link>https://maronghe.github.io/2020/11.golang%E5%AF%BC%E5%8C%85%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Sun, 10 May 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/11.golang%E5%AF%BC%E5%8C%85%E9%A1%BA%E5%BA%8F/</guid>
      <description>1.包存在哪里？
看段代码，想必大家都知道GoPath和GoRoot的是什么了。（GoPath = 你的工作空间路径 ，GoRoot = Go的安装路径）
func init() { fmt.Printf(&amp;#34;Go Root %s \n&amp;#34;, os.Getenv(&amp;#34;GOROOT&amp;#34;)) // Go Root /usr/local/Cellar/go/1.14/libexec 	fmt.Printf(&amp;#34;Go Path %s \n&amp;#34;, os.Getenv(&amp;#34;GOPATH&amp;#34;)) // Go Path /Users/logan/go } 通过 . 对 “fmt” 进行别名，则不需要使用 fmt.Printf(&amp;quot;...&amp;quot;)了，但一个包中只能有一个.别名否则会报错。同时可以配置多个GoPath用 : 分割，例如 GOPATH=/Users/logan/go:~/myworkspace
2.扫描包的顺序？
import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) 如果搜索net/http包时，搜索顺序如下:
/usr/local/Cellar/go/1.14/libexec/src/net/http /Users/logan/go/src/net/http ~/myworkspace/src/net/http 3.包的导入顺序？及var、const、init()加载顺序。
包导入顺序如图所示，同时可知先初始化const、其次为var、之后为init()，注意同时可以有多个init方法，从上到下依次执行。
4.包重名了怎么办？
import ( &amp;#34;runtime&amp;#34; &amp;#34;strings&amp;#34; strings2 &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) func TestImport(t *testing.T){ strings.PrintlnHello(&amp;#34;Logan&amp;#34;) strings2.Compare(&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;) } 如果包重名了，只能起别名，否则不能识别出是哪个包中的方法需要引用。
5.包导入的”奇淫技巧“
_导入 及 远程包</description>
    </item>
    
    <item>
      <title>#8 Study Recording</title>
      <link>https://maronghe.github.io/2020/8.studyrecording/</link>
      <pubDate>Tue, 28 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/8.studyrecording/</guid>
      <description>Q : 怎样知道一个变量分配到堆上还是栈上？
A :编译器首先尝试分配到栈上，但如果编译器不能保证函数返回值是否被引用，那么编译器会分配到堆上。如果一个对象太大了。也会分配到GC堆上。当今的编译器来说，如果一个使用变量的地址，该对象时分配堆上的候选对象，但是逃逸分析后可以识别如果改对象未超过函数的返回范围，那么该变量也可能保存在栈上。
R : https://golang.org/doc/faq#stack_or_heap
  new 和 make 有什么区别
A : new(T)： 分配内存 但初始化仅为0值并返回其指针T和*T（值）。
new(File) =&amp;gt; &amp;amp;File{} // 初始化0值
make(T,args) 仅用于创建 map slice channel，并返回非0值（not zeroed）的类型T（非 *T）
R : https://golang.org/doc/effective_go.html#allocation_new
https://golang.org/doc/effective_go.html#allocation_make
  Go 的内存分配器是基于TCMalloc的一种分配器（TC Malloc Thread-Cached Malloc）
YouTube Link, GopherCon UK 2018
 申请内存顺序    4.Go是一种基于epoll的多路复用IO模型，其TCPListener是对netFD进行封装。
  Sudog的资源池：每个P都有自己的缓冲池和全局调度器缓存池。
 当本地的sudog的缓冲区为0时，加锁去全局调度器sudog的缓冲池去取全局的一半。 否则新创建一个sudog。    go语言编译后成汇编语言。
go tool compile -S file.go</description>
    </item>
    
    <item>
      <title>#9 数组和切片</title>
      <link>https://maronghe.github.io/2020/9.arrayandslice/</link>
      <pubDate>Wed, 22 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/9.arrayandslice/</guid>
      <description>底层结构 创建  var make []int{}   slice扩容 复用底层数组  注意：
 array不能跟nil比较，编译报错 make只能用于 map， channel ，slice的创建，不能创建数组 var arr [5]int 创建数组，初始化为5个零  ​
 数组大小不可变，切片可变 kind 数组 array [2]int , [3]int[] slice slice []int copy 仅能用于slice，并且dst必须要有容量 复用底部数组 t3 := t1[2:4] // 左闭右开 创建  var arr []int // arr == nil true make &amp;amp; []int{} // arr != nil true    arr := [2]int{1, 3} fmt.Println(reflect.ValueOf(arr).Kind()) // array 	fmt.</description>
    </item>
    
    <item>
      <title>#7 Goalng协程和线程</title>
      <link>https://maronghe.github.io/2020/7.goroutine/</link>
      <pubDate>Tue, 21 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/7.goroutine/</guid>
      <description>协程和线程   os线程：每几毫秒，硬件计时器会中断处理器，然后调用schedule的内核函数，挂起当前执行的线程，将状态保存到寄存器中。检查可执行线程列表并决定下一次运行的线程。并从内存中恢复寄存器信息继续执行。因为os线程是被内核锁调度，所以一个线程执行状态切换到另一个线程的执行状态需要切换上下文。也就是说，存储用户线程的状态到寄存器，和回复寄存器中读取状态，更新调度器的速度是很慢的。因为其内部局限性很差，需要访问内存好几次，增加运行运行cpu的周期。
  协程调度：
 Go有自己的调度器，m:n，n个os线程上调度m个协程。调度器的工作和内核的调度是相似的，但调度器只关注go程序中的协程。 和os线程调度不同的是，go并不是一个硬件定时器，而是被go“建筑”本身进行调度的。  比如一个协程执行了time.Sleep()或channel调用或mutex操作阻塞时。调度器会使其进入休眠，并开始执行另一个协程，直到时机到了再去唤醒第一个协程。因为这种调度不需要进入内核的上下文。所以重新调度一个协程要比调度一个线程的代价要低得多。      区别：
 线程是由系统操作系统（os）进行调度的，需要上下文切换 协程一般是由开发者显式调度，避免了上下文切换，从而简化了高并发。[Go并发的实现原理]    传统是多线程，共享内存来实现通信， 例如JAVA，CPP；而go采用CSP，通过通信方式来共享内存。
  Java中在访问共享变量（Map，List等）时需要加锁进行访问，从而也衍生出一种方便操作的数据类型，即线程安全的集合，例如java.util.concurrent.包中的数据结构。
  Go采用CSP，通信来共享内存方式
  Channel 实现原理
Go channel 实现原理分析 - golang开发笔记 - SegmentFault 思否
  数据结构，实际上是基于 RingBuffer Wiki
数据结构的实现
 dataqsiz // 缓冲区容量，循环队列 qcount // 缓冲区的元素个数 Buf unsafe.Pointer // 指向缓冲区，表示一个已经发送但还未接收的数据。 sendx // 下一个可发送的地址 recvx // 下一个可接收的地址 sendq // 发送的sudog列表，当一个发送操作执行时，若缓冲区满了且无接收者在接送，则协程挂起，并将sudog放入sendq中 sudo G - G 代表Goroutine recvq // 接收的sudog列表，当一个接受操作执行时。若缓冲区无数据且无发送者在等待，则协程挂起，并将sudog放入recvq中 closed // 管道是否关闭 elemsize // 元素大小 elemtype // *_type 元素类型 lock mutex // 锁，用于hchan加锁, 限制只能一个goroutine同时访问一个channel    创建channel</description>
    </item>
    
    <item>
      <title>#6 Golang锁</title>
      <link>https://maronghe.github.io/2020/6.mutex/</link>
      <pubDate>Wed, 15 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/6.mutex/</guid>
      <description>Golang锁 RWMutex 读写锁： ​	内部需要维护一个复杂的内部记录。所以适用于并发读取，修改操作比较少的情况，相反，竞争较低相较于互斥锁性能较慢。
​	Mutex 互斥锁：不可重入
​	不可重入的原因：互斥量的目的是为了确保共享变量在程序执行时的关键点上能够保证不变性。不变性的其中之一是“没有goroutine访问共享变量”。
​	但实际上对于mutex保护的变量来说，不变性还包括其它方面。当一个goroutine获得了一个互斥锁时，它会断定这种不变性能够被保持。其获取并保持锁期间，可能会去更新共享变量，这样不变性只是短暂地被破坏。然而当其释放锁之后，它必须保证不变性已经恢复原样。
​	尽管一个可以重入的mutex也可以保证没有其它的goroutine在访问共享变量，但这种方式没法保证这些变量额外的不变性。
​	总结：互斥锁中的互斥量要保证共享变量的不变性，可重入锁可以保证没有其他的goroutine访问共享变量，但不能保证额外变量的不变性。
Mutex锁的实现  加锁 解锁  // sync.Once() TODO type Once struct { m Mutex done uint32 } func (o *Once) Do(f func()) { if atomic.LoadUint32(&amp;amp;o.done) == 1 { return } o.m.Lock() defer o.m.Unlock() if o.done == 0 { defer atomic.StoreUint32(&amp;amp;o.done, 1) f() // 只执行一次  } } </description>
    </item>
    
    <item>
      <title>#5 Go GC</title>
      <link>https://maronghe.github.io/2020/5.go-gc/</link>
      <pubDate>Sat, 11 Apr 2020 18:36:00 +0200</pubDate>
      
      <guid>https://maronghe.github.io/2020/5.go-gc/</guid>
      <description>GC分类：追踪式、引用计数式  追踪式，分为多种不同类型，例如：  标记清扫：从根对象出发，将确定存活的对象进行标记，并清扫可以回收的对象。 标记整理：为了解决内存碎片问题而提出，在标记过程中，将对象尽可能整理到一块连续的内存上。 增量式：将标记与清扫的过程分批执行，每次执行很小的部分，从而增量的推进垃圾回收，达到近似实时、几乎无停顿的目的。 增量整理：在增量式的基础上，增加对对象的整理过程。 分代式：将对象根据存活时间的长短进行分类，存活时间小于某个值的为年轻代，存活时间大于某个值的为老年代，永远不会参与回收的对象为永久代。并根据分代假设（如果一个对象存活时间不长则倾向于被回收，如果一个对象已经存活很长时间则倾向于存活更长时间）对对象进行回收。   引用数：根据对象自身的引用计数来回收，当引用计数归零时立即回收。  Go中使用的GC方式 Go使用无分代、不整理、并发的*三色标记清除法*（与用户代码并发执行）
Because:(反证法)
 对象整理的优势是为了解决内存碎片化的问题和顺序内存分配器。但Go采用tcmalloc，基本上是没有碎片化的对象。顺序内存分配器在多线程下不适用。基于tcmalloc的内存分配算法，对于整理发来说，并不能得到实质的提升。 分代回收基于分代假设，分代假设主要将基于回收精力放到新创建的对象上。而Go创建对象时会进行逃逸分析会把对象尽量的分配到栈上，只有长时间存活的对象才会分配到堆上。那么goroutine死亡后，栈也会直接回收，不会参与GC，那么分代回收没有优势。 go采用与用户并发执行，则STW时间与对象的大小和是否分代，并没有直接关系。go团队使用更好的回收方式（部分CPU执行垃圾回收），而不把暂停回收时间作为唯一标准。  三色标记法  三色标记法是一种描述追踪式垃圾回收的机制的一种方式。它描述了由黑、灰和白色组成（仅为概念），从可能要删除的对象列表中（白色列表），通过_根对象_逐步着色成灰色，最终扫描完成后为黑色，当无灰色对象，其余的白色对象即可回收对象，将被删掉的过程。 根对象有哪些？  栈中的对象 全局变量 寄存器    并发标记回收方式实现的难点 难点：回收的准确性：*不能漏掉可回收对象，也不能多删不可回收对象*
  赋值器的颜色 及 强弱不变性
  强弱不变性
当一下两个条件均满足时，会破坏垃圾回收的正确性。（即对象分配为一个有向图）
条件1：赋值器修改对象图，导致黑对象引用白色对象。
条件2：从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏。
译：
条件1：赋值器修改黑色对象引用白色对象。
条件2：赋值器破坏了未经访问的，灰色对象到白色对象的路径。
当避免条件
避免条件1：则所有白色对象均被引用，没有白色对象会被遗漏。
避免条件2：则从灰色对象出发，总存在一条没有访问过的路径，从而找到白色对象，而不会遗漏白色存活对象。
强不变性：同时满足条件1和条件2。即没有对象会被遗漏，没有未访问的路径会被破坏。弱不变性：满足条件1。即没有对象会被破坏。但不能保证黑色对象引用白色对象。  赋值器分为灰色赋值器（Dijkstra插入屏障）和黑色赋值器（Yuasa 屏障）
1.赋值器的颜色对对象回收的影响
允许灰色赋值器存在
 则必须在回收结束之前重新扫描对象图。 如果重新扫描过程中，发现了新的灰色或白色对象。回收期还需要对新发现的对象进行追踪。但是在追踪新对象过程中，赋值器仍然可以在根中插入新的非黑色的引用，如此往复，直到重新扫描过程没发现新的白色或灰色对象。· ·总结·：允许灰色赋值器存在时，最坏情况下，回收期只能将所有的赋值器线程停止才能完成对对象的完整扫描，也就是STW。  GC触发时机：1.14  主动触发：阻塞等待完成 被动触发  使用系统监控，当超过两分钟没有产生任何GC时强制触发GC。 使用步调（Pacing）算法，其核心思想是控制内存增长比例。      GC关注的指标  CPU利用率（因为并发执行） GC停顿时间 GC停顿频率 GC可扩展性，即回收性能。  GC调优方向 : 优化内存的申请速度，尽可能的少申请内存，复用已申请的内存  大量创建Goroutine，对调度器产生很大的压力。可以批量创建部分的goroutine从而降低调度器调度的压力，从而降低GC时间。 字符串的拼接 + 号，即需要内存拷贝，将内容从原来的内存位置拷贝到新的内存位置。造成大量不必要的内存分配。    GC 触发时间顺序：1.</description>
    </item>
    
  </channel>
</rss>
